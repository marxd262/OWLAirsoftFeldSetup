<style>
    .noGap{
        gap: 0!important;
    }

    .flip{
        transform: scaleX(-1);
    }

    .matchScoreProgressBar{
        width: 50%;
        height: 15px;
        border: solid black 2px;
    }
    
    .morePoints{
        margin-left: 5px;
        margin-right: 5px;
    }

    .myprogress {
        width: 0%;
        height: 100%;
    }

    .red {
        background-color: @_gameStateService.Teams[TeamColor.RED].ColorCssImportant;
    }
    
    .blue {
        background-color: @_gameStateService.Teams[TeamColor.BLUE].ColorCssImportant;
     }
    
</style>

<div class="d-flex flex-row">
    <div class="matchScoreProgressBar">
        <div class="blue myprogress" />
    </div>
    <div class="matchScoreProgressBar flip">
        <div class="red myprogress"/>
    </div>
</div>


<script>
    function setProgressbar(color, percent){
        var team;
        if(color === 0){
            team = ".red";
        }
        else{
            team = ".blue";
       }
        $(team).animate({width: percent}, "fast");
    };
</script>

@code {

    private string DetermineWinner
    {
        get
        {
            var winner = _gameStateService.CurrentGame?.GetWinner;
            switch (winner)
            {
                case TeamColor.BLUE:
                    return ">";
                case TeamColor.RED:
                    return "<";
                default:
                    return " ";
            }
        }
    }

    private string GetPoints(TeamColor color)
    {
        if (_gameStateService.CurrentGame == null)
            return string.Empty;
        
        return $"{_gameStateService.CurrentGame.GetDisplayPoints(color)}/{_gameStateService.CurrentGame.MaxTickets}";
    }
    
}