<style>
    .noGap{
        gap: 0!important;
    }

    .flip{
        transform: scaleX(-1);
    }

    .matchScoreProgressBar{
        width: 50%;
        height: 15px;
    }
    
    .morePoints{
        margin-left: 5px;
        margin-right: 5px;
    }


    .red *.rz-progressbar-value{
        background-color: @_gameStateService.Teams[TeamColor.RED].ColorCssImportant;
    }
    
    .blue *.rz-progressbar-value{
         background-color: @_gameStateService.Teams[TeamColor.BLUE].ColorCssImportant;
     }
    
</style>

<RadzenStack Orientation="Orientation.Vertical" class="noGap">
    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceBetween">
            <span>Team @_gameStateService.Teams[TeamColor.BLUE].Name @GetPoints(TeamColor.BLUE)</span>
            
            <RadzenStack>
                @if (_gameStateService.CurrentGame == null)
                {
                    <RadzenProgressBarCircular Style="height: 25px" Mode="ProgressBarMode.Indeterminate" ShowValue="false"/>
                }
                else
                {
                    <span>@_gameStateService.CurrentGame?.GetTimer?.ToString(@"mm\:ss")</span>
                }
            </RadzenStack>
            
            <span>Team @_gameStateService.Teams[TeamColor.RED].Name @GetPoints(TeamColor.RED)</span>
    </RadzenStack>
    <RadzenStack class="noGap" Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.SpaceAround" AlignItems="AlignItems.Stretch">
        <RadzenProgressBar Min="@MIN" Max="@MAX" Value="@GetTeamScoreForProgressBar(TeamColor.BLUE)" ShowValue="false" class="matchScoreProgressBar flip blue"/>
        <span class="morePoints">@DetermineWinner</span>
        <RadzenProgressBar Min="@MIN" Max="@MAX" Value="@GetTeamScoreForProgressBar(TeamColor.RED)" ShowValue="false" class="matchScoreProgressBar red"/>
    </RadzenStack>

</RadzenStack>
@code {

    private string DetermineWinner
    {
        get
        {
            var winner = _gameStateService.CurrentGame?.GetWinner;
            switch (winner)
            {
                case TeamColor.BLUE:
                    return ">";
                case TeamColor.RED:
                    return "<";
                default:
                    return " ";
            }
        }
    }

    private string GetPoints(TeamColor color)
    {
        if (_gameStateService.CurrentGame == null)
            return string.Empty;
        
        return $"{_gameStateService.CurrentGame.GetDisplayPoints(color)}/{_gameStateService.CurrentGame.MaxTickets}";
    }
    
}